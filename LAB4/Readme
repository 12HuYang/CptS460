460 Lab Assignment #4

            460 LAB Assignment #4: part of the takehome EXAM
                        DUE: 2-17-2017
1. OBJECTIVES:
   fork and exec in MTX

   READ: Chapter 5.9:   fork-exec in Unix/Linux
                 5.9.1: fork in MTX
                 5.9.2: exec in MTX

2. REQUIREMENTS:

   Implement the following system calls for the MTX system:

===========================================================================
(8).  pid = fork()  : fork a child process with an identical Umode image;
                      parent returns child's pid, child returns 0.

(9).  r = exec(file): change image to the specified (executable) file

As usual, return -1 if the syscall fails.      
===========================================================================

                    3. HELP INFOMATION

1. HOWTO fork():

(1). Do the same as kfork() to create a child proc in such a way that when the
     child starts to runs (in Kmode), it RESUMES TO goUmode().
     
(2). Determine the child's segment as  u16 child_segment. 

     Set child's   PROC.uss = child_segment, and
                   PROC.usp = running->usp   (See below for WHY?)

     But DO NOT load any Umode image (file) to child's segment because it 
     will have the SAME Umode iamge of its parent (the running proc). 
                       
(3). Use get_word()/put_word() to implement a 
               copy_image(child_segment)
     function, which copies the Umode image of running to child_segment.

     copy_image() implies that the Umode images of parent and child are
     IDENTICAL. So, their saved usp must also be the same value (each is an 
     offset relative to its own segment).

(4). Copy Image:

       Assume: P1 fork() P2 by        int r = syscall(7,0,0);
		      

========================== P1's image in 0x2000 ============================

0x2000                   |       int80h             |  INT 80  |syscall(7,0,0)
----------------------------------------------------|--------------------------
|Code Data               |DS|ES|di|si|bp|dx|cx|bx|ax|PC|CS|flag|rPC|7|0|0|xxxx| 
--------------------------|-----------------------------------------------|----
                         usp                                              usp
P1's PROC.uss=0x2000      |             DS,ES,CS = 0x2000
          usp= ------------         


===========================P2's image in 0x3000 ============================

0x3000                   |       int80h             |  INT 80  |syscall(7,0,0)
----------------------------------------------------|--------------------------
|Code Data               |DS|ES|di|si|bp|dx|cx|bx|ax|PC|CS|flag|rPC|7|0||xxxxx| 
--------------------------|----------------------------------------------------
                         usp    
P2's PROC.uss=0x3000      |      COPIED DS,ES,CS = 0x2000 ALSO
          usp=-------------


/******************************************************************************
 If we let P2 goUmode() AS IS, it will resume to the segment 0x2000 also since 
 the copied DS,ES,CS are all 0x2000: like sending TWO fellows to the same BED !

   OK in the state of Washington but ILLEGAL in other parts of the world !

******************************************************************************/ 

  So the important part is how to fix the child's ustack contents to let it

            . return to Umode in its OWN BED, and
            . as if it had executed
                    pid = fork();
              but with a return pid = 0 
              (Recall that the parent returns with the chid's pid) 

     That's the fun part!!!! Think about how to do these first.
=============================================================================

2. HOWTO exec("filename");    

(1). In general:
     Locate the file "filename", verify it's eXecutable, read file header
     to determine the TOTAL memory needed, allocate a memory area for the 
     NEW Umode image, then load the EXECUTABLE part of the file into memory.


MUST USE YOUR OWN load(filename, segment) function !!!!!


(2). After loading the new Umode image, fix up the ustack contents to make the
     process execute from virtual address 0 when it returns to Umode. Refer to 
     the diagram again:

     (LOW)  uSP                                | by INT 80  |   HIGH
     ---------------------------------------------------------------------
           |uDS|uES| di| si| bp| dx| cx| bx| ax|uPC|uCS|flag| XXXXXX
     ---------------------------------------------------------------------
            -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1 | 0 

        (a). re-establish ustack to the very high end of the segment.
        (b). "pretend" it had done  INT 80  from (virtual address) 0: 
             (c). fill in uCS, uDS, uES in ustack
             (d). execute from VA=0 ==> uPC=0, uFLAG=0x0200, 
                                        all other registers = 0;
             (e). fix proc.uSP to point at the current ustack TOP (-24)

     Finally, return from exec() ==> goUmode().
